{
    "openapi": "3.0.0",
    "info": {
        "title": "voting-api",
        "description": "This is a voting-api development server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "email": "peter.hrobar@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0.0"
    },
    "paths": {
        "/questions/{question_id}/votes/locations": {
            "get": {
                "tags": [
                    "no-auth",
                    "Location"
                ],
                "summary": "Get all locations for all the votes belonging to a specific question",
                "operationId": "123aad836767a254573a0b987f66b1e0",
                "parameters": [
                    {
                        "name": "question_id",
                        "in": "path",
                        "description": "ID of the question",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "type": "integer",
                                                "format": "int64",
                                                "example": 1
                                            },
                                            "ip": {
                                                "type": "string",
                                                "format": "ipv4"
                                            },
                                            "country_name": {
                                                "type": "string",
                                                "example": "Hungary"
                                            },
                                            "city": {
                                                "type": "string",
                                                "example": "Buda√∂rs"
                                            },
                                            "latitude": {
                                                "type": "number",
                                                "format": "float",
                                                "example": 47.438499450684
                                            },
                                            "longitude": {
                                                "type": "number",
                                                "format": "float",
                                                "example": 18.910800933838
                                            },
                                            "created_at": {
                                                "type": "string",
                                                "format": "datetime",
                                                "example": "2023-07-19T08:27:32.000000Z"
                                            },
                                            "updated_at": {
                                                "type": "string",
                                                "format": "datetime",
                                                "example": "2023-07-19T08:27:32.000000Z"
                                            },
                                            "vote_count": {
                                                "type": "integer",
                                                "format": "int32",
                                                "example": 5
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Question not found"
                    }
                }
            }
        },
        "/questions": {
            "get": {
                "tags": [
                    "no-auth",
                    "Question"
                ],
                "summary": "Show all questions",
                "description": "Show all questions registered in the database",
                "operationId": "showAllQuestions",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Question"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "OAuth",
                    "Question"
                ],
                "summary": "Create a question",
                "description": "Creates a new question.",
                "operationId": "createQuestion",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "question_text": {
                                        "type": "string",
                                        "example": "What is your favorite color?"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Question successfully created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Question successfully created"
                                        },
                                        "question": {
                                            "$ref": "#/components/schemas/Question"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "The question_text field is required"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Internal server error"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/questions/{question_id}": {
            "get": {
                "tags": [
                    "no-auth",
                    "Question"
                ],
                "summary": "Show one question with it's votes",
                "description": "Show question details and all votes belonging to the specified question",
                "operationId": "showOneQuestion",
                "parameters": [
                    {
                        "name": "question_id",
                        "in": "path",
                        "description": "Question ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "properties": {
                                                "votes": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/Vote"
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        },
                                        {
                                            "$ref": "#/components/schemas/Question"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Question not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Question not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "OAuth",
                    "Question"
                ],
                "summary": "Modify a question",
                "description": "Modifies an existing question.",
                "operationId": "modifyQuestion",
                "parameters": [
                    {
                        "name": "question_id",
                        "in": "path",
                        "description": "ID of the question",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "question_text": {
                                        "type": "string",
                                        "example": "What is your favorite color?"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Question successfully modified",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "integer",
                                            "example": "1"
                                        },
                                        "question_text": {
                                            "type": "string",
                                            "example": "What is your favorite color?"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "The question_text field is required"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Question not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Question not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Internal server error"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "OAuth",
                    "Question"
                ],
                "summary": "Open or close a question",
                "description": "Open or close a question by updating its 'is_closed' status. If a Question is closed no modification can happen to it (including voting).",
                "operationId": "64b6e78eefa61af988e59db037cbccd5",
                "parameters": [
                    {
                        "name": "question_id",
                        "in": "path",
                        "description": "ID of the question",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "is_closed": {
                                        "description": "New status of the question",
                                        "type": "boolean"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Question opened or closed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Question"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "The is_closed field is required."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Question not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Question not found."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Internal server error."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/questions/{question_id}": {
            "delete": {
                "tags": [
                    "OAuth",
                    "Question"
                ],
                "summary": "Delete a question",
                "description": "Deletes a specific question.",
                "operationId": "deleteQuestion",
                "parameters": [
                    {
                        "name": "question_id",
                        "in": "path",
                        "description": "ID of the question",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Question deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Question deleted successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Question not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Question not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/session": {
            "post": {
                "tags": [
                    "OAuth",
                    "Session"
                ],
                "summary": "Start a new session",
                "description": "Start a new session at the back-end side so questions and votes can be filtered by the given user id",
                "operationId": "createSession",
                "requestBody": {
                    "description": "User UUID required to create a session",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "user_id"
                                ],
                                "properties": {
                                    "user_id": {
                                        "description": "The UUID of the user.",
                                        "type": "string",
                                        "format": "uuid"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Session successfully created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "description": "Success message",
                                            "type": "string"
                                        },
                                        "session_id": {
                                            "description": "The UUID of the created session.",
                                            "type": "string",
                                            "format": "uuid"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "description": "Error message describing the validation error.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/session/{session_id}": {
            "delete": {
                "tags": [
                    "OAuth",
                    "Session"
                ],
                "summary": "Destroy a session",
                "description": "Destroy a session",
                "operationId": "deleteSession",
                "parameters": [
                    {
                        "name": "session_id",
                        "in": "path",
                        "description": "The id of the session to be deleted",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Session closed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "description": "Success message",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "description": "Error message indicating an invalid session ID.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/summary": {
            "get": {
                "tags": [
                    "no-auth",
                    "Summary"
                ],
                "summary": "Get Summary",
                "description": "Retrieve the summary information about various statistics.",
                "operationId": "getSummary",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Summary"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/token": {
            "post": {
                "tags": [
                    "no-auth",
                    "push-token"
                ],
                "summary": "Store FCM token for push notifications",
                "description": "Store or refresh a FCM token associated with the requestor's IP address for push notifications.",
                "operationId": "storeToken",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "token": {
                                        "description": "FCM token to store or refresh",
                                        "type": "string",
                                        "example": "abcd1234"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Token registered successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Token registered successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Token refreshed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Token refreshed successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Token is already registered",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Token is already registered"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "no-auth",
                    "push-token"
                ],
                "summary": "Delete a FCM token",
                "description": "Delete a FCM token associated with the requestor's IP address.",
                "operationId": "deleteToken",
                "responses": {
                    "200": {
                        "description": "Token successfully deleted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Token successfully deleted."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Token not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Token not found."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/questions/{question_id}/votes": {
            "get": {
                "tags": [
                    "no-auth",
                    "Vote"
                ],
                "summary": "Get all votes for a question",
                "description": "Retrieve all votes associated with a specific question.",
                "operationId": "showAllVotesforQuestion",
                "parameters": [
                    {
                        "name": "question_id",
                        "in": "path",
                        "description": "ID of the question",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Vote"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Question not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Question not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "OAuth",
                    "Vote"
                ],
                "summary": "Create a new vote",
                "description": "Create a new vote associated with a question.",
                "operationId": "createVote",
                "parameters": [
                    {
                        "name": "question_id",
                        "in": "path",
                        "description": "ID of the question",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "vote_text": {
                                        "description": "The updated vote text",
                                        "type": "string"
                                    },
                                    "number_of_votes": {
                                        "description": "The updated number of votes",
                                        "type": "integer",
                                        "default": 0
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Vote created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Vote"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The vote_text field is required"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Question not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Question not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Internal server error"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "OAuth",
                    "Vote"
                ],
                "summary": "Delete all votes for a question",
                "description": "Deletes all votes associated with a specific question.",
                "operationId": "deleteAllVotesforQuestion",
                "parameters": [
                    {
                        "name": "question_id",
                        "in": "path",
                        "description": "ID of the question",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "All votes deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "All votes deleted successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Question not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Question not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Internal server error"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/questions/{question_id}/votes/{vote_id}": {
            "get": {
                "tags": [
                    "no-auth",
                    "Vote"
                ],
                "summary": "Show one voting option",
                "description": "Show one voting option belonging to a question",
                "operationId": "showOneVote",
                "parameters": [
                    {
                        "name": "question_id",
                        "in": "path",
                        "description": "Question ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "vote_id",
                        "in": "path",
                        "description": "Vote ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Vote"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Vote or Question not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "properties": {
                                                "status": {
                                                    "type": "string",
                                                    "example": "error"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "Vote not found"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        {
                                            "properties": {
                                                "error": {
                                                    "type": "string",
                                                    "example": "error"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "Question not found"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "OAuth",
                    "Vote"
                ],
                "summary": "Modify vote",
                "description": "Modify a specific vote associated with a question.",
                "operationId": "modifyVote",
                "parameters": [
                    {
                        "name": "question_id",
                        "in": "path",
                        "description": "ID of the question",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "vote_id",
                        "in": "path",
                        "description": "ID of the vote",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "vote_text": {
                                        "description": "The updated vote text",
                                        "type": "string"
                                    },
                                    "number_of_votes": {
                                        "description": "The updated number of votes",
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Vote modified successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Vote"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The vote_text field is required"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Question or vote not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Question or vote not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Internal server error"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "OAuth",
                    "Vote"
                ],
                "summary": "Delete a vote",
                "description": "Deletes a specific vote from a question.",
                "operationId": "deleteVote",
                "parameters": [
                    {
                        "name": "question_id",
                        "in": "path",
                        "description": "ID of the question",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "vote_id",
                        "in": "path",
                        "description": "ID of the vote",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Vote deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Vote deleted successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Vote or Question not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "properties": {
                                                "status": {
                                                    "type": "string",
                                                    "example": "error"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "Vote not found"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        {
                                            "properties": {
                                                "error": {
                                                    "type": "string",
                                                    "example": "error"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "Question not found"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "no-auth",
                    "Vote"
                ],
                "summary": "Increase vote number",
                "description": "Increase the number of votes for a specific vote associated with a question.",
                "operationId": "increaseVoteNumber",
                "parameters": [
                    {
                        "name": "question_id",
                        "in": "path",
                        "description": "ID of the question",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "vote_id",
                        "in": "path",
                        "description": "ID of the vote",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Vote number increased successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Vote"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Vote or Question not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "properties": {
                                                "status": {
                                                    "type": "string",
                                                    "example": "error"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "Vote not found"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        {
                                            "properties": {
                                                "error": {
                                                    "type": "string",
                                                    "example": "error"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "Question not found"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Internal server error"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "Location": {
                "title": "Location model",
                "description": "Location model holding Geo information about the voters",
                "required": [
                    "ip",
                    "country_name",
                    "city",
                    "latitude",
                    "longitude"
                ],
                "properties": {
                    "id": {
                        "title": "ID",
                        "description": "Auto-incrementing ID of the location",
                        "type": "integer",
                        "format": "integer"
                    },
                    "ip": {
                        "title": "IP address (IPV4)",
                        "description": "The IP address of the location",
                        "type": "string",
                        "format": "ipv4",
                        "example": "8.8.8.8"
                    },
                    "country_name": {
                        "title": "Country name",
                        "description": "The name of the country",
                        "type": "string",
                        "example": "Hungary"
                    },
                    "city": {
                        "title": "City name",
                        "description": "The name of the city",
                        "type": "string",
                        "example": "Budapest"
                    },
                    "latitude": {
                        "title": "Latitude",
                        "description": "The latitude coordinates",
                        "type": "number",
                        "format": "float"
                    },
                    "longitude": {
                        "title": "Longitude",
                        "description": "The longitude coordinates",
                        "type": "number",
                        "format": "float"
                    },
                    "created_at": {
                        "title": "Created at",
                        "description": "Date and time when the location was created",
                        "type": "string",
                        "format": "datetime",
                        "default": "now",
                        "example": "2023-06-18 12:01:01"
                    },
                    "updated_at": {
                        "title": "Updated at",
                        "description": "Date and time when the location was updated",
                        "type": "string",
                        "format": "datetime",
                        "default": "now",
                        "example": "2023-06-18 12:01:01"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "Location"
                }
            },
            "Question": {
                "title": "Question model",
                "description": "Question model",
                "required": [
                    "question_text"
                ],
                "properties": {
                    "id": {
                        "title": "ID",
                        "description": "Auto-incrementing ID of the question",
                        "type": "integer",
                        "format": "integer"
                    },
                    "question_text": {
                        "title": "Question text",
                        "description": "Question text",
                        "type": "string",
                        "format": "string"
                    },
                    "is_closed": {
                        "title": "Is closed?",
                        "description": "Determines if the Question is closed for modification or voting",
                        "type": "boolean",
                        "default": false
                    },
                    "number_of_votes": {
                        "title": "Number of votes",
                        "description": "Number of voting options the question has (calculated field)",
                        "type": "integer",
                        "minimum": 0
                    },
                    "last_vote_at": {
                        "title": "Last date and time when a vote was updated",
                        "description": "Date and time when the last vote was received for the question (calculated field)",
                        "type": "string",
                        "format": "datetime",
                        "example": "2023-06-18 12:01:01"
                    },
                    "created_at": {
                        "title": "Created at",
                        "description": "Date and time when the question was created",
                        "type": "string",
                        "format": "datetime",
                        "default": "now",
                        "example": "2023-06-18 12:01:01"
                    },
                    "updated_at": {
                        "title": "Updated at",
                        "description": "Date and time when the question was updated",
                        "type": "string",
                        "format": "datetime",
                        "default": "now",
                        "example": "2023-06-18 12:01:01"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "Question"
                }
            },
            "Summary": {
                "title": "Summary model",
                "description": "Summary model, holding information about various statistics.",
                "properties": {
                    "number_of_answers": {
                        "description": "Number of answers.",
                        "type": "integer"
                    },
                    "number_of_questions": {
                        "description": "Number of questions.",
                        "type": "integer"
                    },
                    "total_number_of_votes": {
                        "description": "Total number of votes.",
                        "type": "integer"
                    },
                    "highest_vote": {
                        "description": "Answer with the highest number of votes received",
                        "properties": {
                            "id": {
                                "description": "ID of the question.",
                                "type": "integer"
                            },
                            "question_text": {
                                "description": "Text of the question.",
                                "type": "string"
                            },
                            "vote_text": {
                                "description": "Text of the vote.",
                                "type": "string"
                            },
                            "number_of_votes": {
                                "description": "Number of votes received for the answer.",
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    },
                    "highest_question": {
                        "description": "Question with the most possible answers",
                        "properties": {
                            "id": {
                                "description": "ID of the question.",
                                "type": "integer"
                            },
                            "question_text": {
                                "description": "Text of the question.",
                                "type": "string"
                            },
                            "number_of_votes": {
                                "description": "Number of possible answers for the question.",
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    },
                    "most_voted_question": {
                        "description": "Question with the most received votes",
                        "properties": {
                            "id": {
                                "description": "ID of the question.",
                                "type": "integer"
                            },
                            "question_text": {
                                "description": "Text of the question.",
                                "type": "string"
                            },
                            "total_votes": {
                                "description": "Total votes received for the question.",
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "Vote": {
                "title": "Vote model",
                "description": "Vote model",
                "required": [
                    "vote_text",
                    "number_of_votes"
                ],
                "properties": {
                    "id": {
                        "title": "ID",
                        "description": "Auto-incrementing ID of the vote",
                        "type": "integer",
                        "format": "integer"
                    },
                    "vote_text": {
                        "title": "Vote text",
                        "description": "Vote text",
                        "type": "string",
                        "format": "string"
                    },
                    "number_of_votes": {
                        "title": "Number of votes received",
                        "description": "Number of number of votes received",
                        "type": "integer",
                        "format": "integer",
                        "default": "0"
                    },
                    "question_id": {
                        "title": "Question ID",
                        "description": "ID of the question where this vote belongs",
                        "type": "integer",
                        "format": "integer"
                    },
                    "created_at": {
                        "title": "Created at",
                        "description": "Date and time when the vote was created",
                        "type": "string",
                        "format": "datetime",
                        "default": "now",
                        "example": "2023-06-18 12:01:01"
                    },
                    "updated_at": {
                        "title": "Updated at",
                        "description": "Date and time when the vote was updated",
                        "type": "string",
                        "format": "datetime",
                        "default": "now",
                        "example": "2023-06-18 12:01:01"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "Vote"
                }
            }
        },
        "securitySchemes": {
            "bearerAuth": {
                "type": "http",
                "bearerFormat": "JWT",
                "scheme": "bearer"
            }
        }
    }
}